param(
	#DNS name of the report server
	[string]$ServerName,
	#Root path where the .rdl report files are stored
	[string]$SourcePath,
	#Name of the reporting instance
	[string]$InstanceName,
	#Name of the database holding the reporting data
	[string]$DatabaseName,
	#Name of the database server holding the reporting data database
	[string]$DatabaseServer,
	#Name of the SSRS Datasource
	[string]$DatasourceName,	
	#Deploy folders in the reporting instance?
	[switch]$DeployFolders,
	#Create the datasource?
	[Parameter(ParameterSetName="CreateDatasource", Mandatory=$false)][switch]$CreateDatasource,
	#User that will connect to the reporting database
	[Parameter(ParameterSetName="CreateDatasource", Mandatory=$true)][string]$User,
	#Password
	[Parameter(ParameterSetName="CreateDatasource", Mandatory=$true)][securestring]$Pass,
	[Parameter(ParameterSetName="Install", Mandatory=$false)][switch]$Install,
	[Parameter(ParameterSetName="Install", Mandatory=$true)][string]$InstallerPath
)

#Instantiate the array that will hold the report metadata
$ReportArray = @()
#Loop through the root directory provided in the parameters
foreach($Report in Get-ChildItem -af -Path $SourcePath -Recurse) {
	$Item = $Report
	$Name = [io.path]::GetFileNameWithoutExtension($Item)          #Strip the extension off of the filename - name of the item.
	$Path = Split-Path $Report.FullName
	#Decide which type of path was provided - drive letter or UNC path
	if($Path -like "*:*") {
		#Drive letter
		$Path = $Path.Split("\")
		$Parent = ""
		#Build the parent path by combining each leaf of the rdl path
		for ($i = 1; $i -lt $Path.Count; $i++) {
			if($i -eq $Path.Count -1) {
				$Parent += $Path[$i]
			} else {
				$Parent += $Path[$i] + "/"
			}	
		}
	} elseif($Path -like "\\*") {
		#UNC Path
		$Path = $Path.Replace("\\", "")
		$Path = $Path.Split("\")
		$Parent = ""
		#Build the Parent path by combining each leaf of the rdl path
		for ($i = 1; $i -lt $Path.Count; $i++) {
			if($i -eq $Path.Count) {
				$Parent += $Path[$i]
			} else {
				$Parent += $Path[$i] + "/"
			}			
		}
	} elseif($Path -match "^$") {
		#We weren't able to parse the path's parent, so it's parent is the root of the report server or '/'
		$Parent = "/"
	}

	#Create a custom array variable to hold our metadata
	$Row = "" | Select-Object RDLFileName, ReportServerName, ReportBaseFolder, ReportName, ParentFolder, FullPath
	$Report = "" | Select-Object RDLFileName, ReportServerName, ReportBaseFolder, ReportName, ParentFolder, FullPath
	#Populate the metadata into the custom array variable
	$Row.RDLFileName = $Item
	$Row.ReportServerName = $InstanceName
	$Row.ReportBaseFolder = "/"
	$Row.ReportName = $Name
	$Row.ParentFolder = $Parent
	$Row.FullPath = $Report.FullName
	#Add the custom array variable to the $ReportArray variable
	$ReportArray += $Row
}
	    
function New-SSRSFolder
(
	[string]$FolderName,		
	[string]$Parent	
)
{
	#Declare the Url to the ReportService2010.asmx page	
	$ReportServerUri = "http://$ServerName/ReportServer_$InstanceName/ReportService2010.asmx"
	#Create a new proxy from the $ReportServerUri variable. Use default credentials
	$Proxy = New-WebServiceProxy -Uri $ReportServerUri -UseDefaultCredential
	
	#Explicit cast to the namespace type of the $proxy object(compatability reasons)
	$Type = $Proxy.GetType().Namespace
	$Datatype = ($Type + '.Property')			
	$Property = New-Object ($Datatype)
	#Assign values to the object properties
	$Property.Name = $FolderName
	$Property.Value = $FolderName			
	$NumProperties = 1
	$Properties = New-Object ($Datatype + '[]')$NumProperties 
	$Properties[0] = $Property;
	#Run the CreateFolder function from the ReportService2010.asmx namespace using the property values assigned earlier
	$Proxy.CreateFolder($FolderName, $Parent, $Properties)
}
	
function Publish-SSRS
(	    
	[string[]]$ReportArray
)
{
	#Loop through each report in the report array passed to the function
	foreach($Report in $ReportArray) {
		#Declare the Url to the ReportService2010.asmx page
		$ReportServiceURI = "http://$ServerName/ReportServer_$InstanceName/ReportService2010.asmx"
	    #Write some updates to the user
	    Write-Host "Deploying" $Report.RDLFileName
	    Write-Host "to" $Report.ParentFolder "as" $Report.ReportName	
		#Instantiate a new proxy for interacting with the web service
		$SSRSproxy = New-WebServiceProxy -Uri $ReportServiceURI -UseDefaultCredential
		#Convert the .rdl file to a file stream that can be parsed
		$RDLStream = Get-Content $RDLFileName -Encoding byte
		#Instantiate an array to hold any warnings that are generated by the method CreateCatalogItem
		$Warnings = @()
		#Call the CreateCatalogItem method that is a part of the ReportService2010 namespace
	    $SSRSproxy.CreateCatalogItem("Report", $Report.Name, $Path, $true, $RDLStream, $null, [ref]$Warnings)
	
	    #Send any warnings to the user
	    if ($Warnings) {
	       foreach ($Warning in $Warnings) {
	            Write-Warning $Warning.Message
	        }
	    }
	}
	Set-Datasource
}

function Set-DataSource
{
	#Instantiate a new proxy to interact with the web service
	$Url = "http://$ServerName/ReportServer_$InstanceName/ReportService2010.asmx"	
	$SSRS = New-WebServiceProxy -Uri $Url -UseDefaultCredential
	#Load all the child items to '/' in an array
	$CatalogItems = $SSRS.ListChildren("/", $true)
	#Loop through each catalog item
	foreach($CatalogItem in $CatalogItems) {
		#Check if the CatalogItem is a report
		if($CatalogItem.TypeName -eq "Report") {
			Write-Host "Setting datasource for " + $CatalogItem.Path
			#The CatalogItem is a report
			$ReportPath = $CatalogItem.Path
			#Get all the datasources associated with the report
			$Datasources = $SSRS.GetItemDataSources($ReportPath)
			#Loop through each datasource associated with the report
			foreach($Datasource in $Datasources) {
				#Explicit cast to the namespace type of the $proxy object(compatability reasons)
				$ProxyNamespace = $Datasource.GetType().Namespace
				#Create a new datasource object
				$TargetDataSource = New-Object ("$ProxyNamespace.DataSource")
				#Assign values to the properties of the new datasource
				$TargetDataSource.Name = $TargetDataSourceName
				$TargetDataSource.Item = New-Object ("$ProxyNamespace.DataSourceReference")
				$TargetDataSource.Item.Reference = $TargetDataSourcePath
				$Datasource.Item = $TargetDataSource.Item
				#Call the SetItemDataSources method that is a part of the ReportService2010 namespace
				$SSRS.SetItemDataSources($ReportPath, $Datasource)
			}
		}
	}
}
function New-DataSource
(
	[string]$DatasourceName
)
{
	Write-Host "Creating Datasource..."
	#Declare the Url to the ReportService2010 web service
	$ReportServerUri  = "http://$ServerName/ReportServer_$InstanceName/ReportService2010.asmx"
	#Instantiate a new proxy to interact with the ReportService2010 web service
	$Proxy = New-WebServiceProxy -Uri $ReportServerUri -UseDefaultCredential
	#Explicit cast to the namespace type of the $proxy object(compatability reasons)
	$Type = $Proxy.GetType().Namespace
	#Create a DatasourceDefinition and set the property values
	$DatasourceDefinitionType = ($type + '.DatasourceDefinition')
	$DatasourceDefinition = New-Object($DatasourceDefinitionType)
	$DatasourceDefinition.CredentialRetrieval = "Store"
	$DatasourceDefinition.UserName = $User
	$DatasourceDefinition.Password = $Pass
	$DatasourceDefinition.ConnectString = "Data Source=$DatabaseServer;Initial Catalog=$DatabaseName"
	$DatasourceDefinition.extension = "SQL"
	$DatasourceDefinition.enabled = $true
	$DatasourceDefinition.Prompt = $null
	$DatasourceDefinition.WindowsCredentials = $false

	$ParentFolder = "/DataSources"
	$Overwrite = $true

	#Create the datasource from the parameters set above
	$Proxy.CreateDataSource($DatasourceName, $ParentFolder, $Overwrite, $DatasourceDefinition, $null)
}

<#
if($Install) {
	$SQLInstallerString = $InstallerPath + "\" + "Setup.exe /qs /Action=Install UpdateEnabled=0 /InstanceName='$InstanceName' /IACCEPTSQLSERVERLICENSETERMS  /Action=Install /FEATURES=RS /RSINSTALLMODE=DEFAULTNATIVEMODE /RSSVCSTARTUPTYPE='Automatic'"
	& $SQLInstallerString

}
#>

if($DeployFolders) {	
	foreach($Item in Get-ChildItem -Path $SourcePath -Recurse) {
		if($Item.Attributes -like "*Directory*") {
			$RelativePath = $Item.FullName.Replace($SourcePath, '')
			$RelativePath = $RelativePath.Replace('\', "/")
			$TargetPath = "/" + $RelativePath
			$TargetPath = $TargetPath.Split('/')
			$FolderName = $TargetPath[$TargetPath.Count -1]
			if($TargetPath[$TargetPath.Count -2] -match "^$") {
				$ParentFolder = "/"
			} else {
				$ParentFolder = $TargetPath[$TargetPath.Count -2]
			}
			New-SSRSFolder -FolderName $FolderName -Parent $ParentFolder
		}
	}
	New-SSRSFolder -FolderName "DataSources" -Parent "/"
}

if($CreateDatasource) {
	New-Datasource -DatasourceName "DataSource"
}

#Deploy the reports
Publish-SSRS -ReportArray $ReportArray

Read-Host "Press ENTER to exit ..."
